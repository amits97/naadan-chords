service: naadan-chords-request-api

# Since resource configs are shared, set project directory one level above
projectDir: ../

# Use the serverless-webpack plugin to transpile ES6
plugins:
  - serverless-webpack
  - serverless-domain-manager

# serverless-webpack configuration
# Enable auto-packing of external modules
custom:
  webpack:
    webpackConfig: ./webpack.config.js
    includeModules: true
  customDomain:
    domainName: api.naadanchords.com
    basePath: 'request'
    stage: ${self:provider.stage}
    createRoute53Record: true

provider:
  name: aws
  runtime: nodejs12.x
  stage: prod
  region: ap-south-1

  # 'iamRoleStatements' defines the permission policy for the Lambda function.
  # In this case Lambda functions are granted with permissions to access DynamoDB.
  iamRoleStatements:
    - Effect: Allow
      Action:
        - cognito-idp:ListUsers
        - cognito-idp:AdminListGroupsForUser
        - cognito-idp:AdminLinkProviderForUser
        - cognito-idp:AdminDeleteUser
        - cognito-idp:AdminUpdateUserAttributes
        - cognito-idp:ListUsersInGroup
      Resource: "arn:aws:cognito-idp:ap-south-1:*:*"
    - Effect: Allow
      Action:
        - ses:SendEmail
        - ses:SendRawEmail
      Resource: "*"
    - Effect: Deny
      Action:
        - logs:CreateLogGroup
        - logs:CreateLogStream
        - logs:PutLogEvents
      Resource: "*"

functions:
  options:
    handler: options.main
    events:
      - http:
          path: /
          method: options
          cors: true
  send-request:
    handler: send-request.main
    events:
      - http:
          path: /
          method: post
          cors: true

# Create our resources with separate CloudFormation templates
resources:
  - ${file(../resources/api-gateway-errors.yml)}